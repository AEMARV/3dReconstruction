function [] = sample_code(filePath,fileNameBase,extension)
%%
%% load images and match files for the first example
%%
close all;
I1Path = fullfile(filePath,[fileNameBase,int2str(1),extension]);
I2Path = fullfile(filePath,[fileNameBase,int2str(2),extension]);
I1 = imread(I1Path);
I2 = imread(I2Path);
matches = load(fullfile(filePath,[fileNameBase,'_matches.txt'])); 
CameraMat1 = load(fullfile(filePath,[fileNameBase,int2str(1),'_camera.txt']));
CameraMat2 = load(fullfile(filePath,[fileNameBase,int2str(2),'_camera.txt']));
% this is a N x 4 file where the first two numbers of each row
% are coordinates of corners in the first image and the last two
% are coordinates of corresponding corners in the second image: 
% matches(i,1:2) is a point in the first image
% matches(i,3:4) is a corresponding point in the second image

N = size(matches,1);

%%
%% display two images side-by-side with matches
%% this code is to help you visualize the matches, 
%% you don't need to use it to produce the results for the assignment
%%
imshow([I1 I2]); hold on;
plot(matches(:,1), matches(:,2), '+r');
plot(matches(:,3)+size(I1,2), matches(:,4), '+r');
line([matches(:,1) matches(:,3) + size(I1,2)]', matches(:,[2 4])', 'Color', 'r');


%%
%% display second image with epipolar lines reprojected 
%% from the first image
%%

% first, fit fundamental matrix to the matches
F = fit_fundamental(matches); % this is the function that you need 
correctedMatch = matches;
%% to build to call Peter Kovesi's 8-point algorithm implementation
dist1 = drawEpipoles(F,matches(:,1:2),matches(:,3:4),I2);
dist2 = drawEpipoles(F',matches(:,3:4),matches(:,1:2),I1);
[correctedMatch(:,1:2),correctedMatch(:,3:4)] = refineMatches(matches(:,1:2),matches(:,3:4),F);
dist1 = drawEpipoles(F,matches(:,1:2),matches(:,3:4),I2);
dist2 = drawEpipoles(F',matches(:,3:4),matches(:,1:2),I1);
Points3d = find3d(matches(:,1:2),matches(:,3:4),CameraMat1,CameraMat2);
Points3dCorrected = find3d(correctedMatch(:,1:2),correctedMatch(:,3:4),CameraMat1,CameraMat2);
Center1 = null(CameraMat1);
Center1 = Center1./Center1(4);
Center2 = null(CameraMat2);
Center2 = Center2./Center2(4);
Cents = [Center1(1:3),Center2(1:3)];
Points3d = bsxfun(@rdivide,Points3d,Points3d(:,4));
figure;hold on; axis equal
plot3(Points3d(:,1),Points3d(:,2),Points3d(:,3),'Marker','.','MarkerFaceColor','r','LineStyle','none');
plot3(Cents(1,:)',Cents(2,:)',Cents(3,:)','Marker','+','MarkerFaceColor','g','LineStyle','none');

x1 = ProjectPoints(Points3d',CameraMat1);
x2 = ProjectPoints(Points3d',CameraMat2);

err1 = calcError(x1(:,1:2),matches(:,1:2));
err2 = calcError(x2(:,1:2),matches(:,3:4));

fprintf('Linear : mean square error of projection in image %s1 : %d \n',fileNameBase, err1);
fprintf('Linear : mean square error of projection in image %s2 : %d \n',fileNameBase, err2);
end
function [ dist ] = drawEpipoles(F,matches1,matches2,I2)
dist = 0;
N = size(matches1,1);
L = [matches1 ones(N,1)] * F; % transform points from 
% the first image to get epipolar lines in the second image

% find points on epipolar lines L closest to matches(:,3:4)
L = L ./ repmat(sqrt(L(:,1).^2 + L(:,2).^2), 1, 3); % rescale the line
pt_line_dist = sum(L .* [matches2 ones(N,1)],2);
closest_pt = matches2 - L(:,1:2) .* repmat(pt_line_dist, 1, 2);

% find endpoints of segment on epipolar line (for display purposes)
pt1 = closest_pt - [L(:,2) -L(:,1)] * 10; % offset from the closest point is 10 pixels
pt2 = closest_pt + [L(:,2) -L(:,1)] * 10;

% display points and segments of corresponding epipolar lines
figure;
imshow(I2); hold on;
plot(matches2(:,1), matches2(:,2), '+r');
line([matches2(:,1) closest_pt(:,1)]', [matches2(:,2) closest_pt(:,2)]', 'Color', 'r');
line([pt1(:,1) pt2(:,1)]', [pt1(:,2) pt2(:,2)]', 'Color', 'g');
end
function threeDP = find3d(match1,match2,P1,P2)
A = zeros(4,3);
N = size(match1,1);
threeDP = zeros(N,4);
for i = 1 : N
    A = calcA(match1(i,:),match2(i,:),P1,P2);
    [U,S,V] = svd(A);
    threeDP(i,:) = V(:,end);
end

end
function A = calcA(x1,x2,p1,p2)
    A = zeros(4,4);
    A(1,:) = x1(1).* p1(3,:) - p1(1,:);
    A(2,:) = x1(2).* p1(3,:) - p1(2,:);
    A(3,:) = x2(1).* p2(3,:) - p2(1,:);
    A(4,:) = x2(2).* p2(3,:) - p2(2,:);
end
function x = ProjectPoints(X,P)
    x = P * X;
    x = bsxfun(@rdivide,x,x(3,:));
    x = x';
end
function err = calcError(x1,x2)
    Diff = x1 - x2;
    Diff = Diff.^2;
    err = sum(Diff,2);
    err = mean(err,1);
end
function [Match1Ref,Match2Ref] = refineMatches(match1,match2,F)
   N = size(match1,1);
   Match1Ref = match1;
   Match2Ref = match1;
   for i = 1 : N
      [Match1Ref(i,:),Match2Ref(i,:)] = refineOneMatch(match1(i,:),match2(i,:),F);
   end
   
end
function [Match1Ref,Match2Ref] = refineOneMatch(match1,match2,F)
    T = eye(3);
    T(1,3) = -match1(1);
    T(2,3) = -match1(2);
    
    Tp = eye(3);
    Tp(1,3) = -match2(1);
    Tp(2,3) = -match2(2);
    F = inv(Tp)' * F * inv(T);
    e = null(F);
    temp = e.^2;
    Norm = sqrt(sum(temp(1:2)));
    e = bsxfun(@rdivide,e,Norm);
    ep = null(F');
    temp = ep.^2;
    Norm = sqrt(sum(temp(1:2)));
    ep = bsxfun(@rdivide,ep,Norm);
    
    R = [e(1),e(2),0;-e(2),e(1),0;0,0,1];
    RP = [ep(1),ep(2),0;-ep(2),ep(1),0;0,0,1];
    F = RP*F*R';
    f = e(3);
    fp = ep(3);
    a = F(2,2);
    b = F(2,3);
    c = F(3,2);
    d = F(3,3);
    syms t s(t) g(t)
    g(t) = (t.*(((a*t + b)^2) + (fp^2) * (c*t + d)^2)^2 - (a*d-b*c)*((1+ (f^2)*(t^2))^2)*(a*t + b)*(c*t + d));
    s(t) = ((t^2)/(1+(f^2)*(t^2))) + (    ((c*t + d)^2)   /   ( ((a*t + b)^2) + ((fp^2)*((c*t + d))^2)   )  );
    sol = double(vpasolve(g(t) == 0 , t));
    sol = real(sol);
    infValue = (1/(f^2)) + (c^2)/((a^2) + (fp^2)*(c^2));
    vals = s(sol);
    [MIN,ind] = min(vals);
    if infValue < MIN
    Tfinal = inf;
    else
        Tfinal = sol(ind);
    end
    
    l = [Tfinal * f,1, -Tfinal];
    m = a*Tfinal +b;
    lp = [-fp * (c*Tfinal + d),m,c*Tfinal + d];
    closeL = [-l(1)*l(3),-l(2)*l(3),(l(1)^2) + (l(2)^2)]';
    closeLP = [-lp(1)*lp(3),-lp(2)*lp(3),(lp(1)^2) + (lp(2)^2)]';
    Match1Ref = (inv(T)*R'*closeL)';
    Match2Ref = (inv(Tp)*RP'*closeLP)';
    Match1Ref = Match1Ref(1:2) ./ Match1Ref(3);
    Match2Ref = Match2Ref(1:2) ./ Match2Ref(3);
end